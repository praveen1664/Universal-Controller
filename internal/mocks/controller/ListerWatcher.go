// Code generated by mockery v1.0.0. DO NOT EDIT.

package controller

import context "context"
import controller "github.com/spotahome/gontroller/controller"
import mock "github.com/stretchr/testify/mock"

// ListerWatcher is an autogenerated mock type for the ListerWatcher type
type ListerWatcher struct {
	mock.Mock
}

// List provides a mock function with given fields: ctx
func (_m *ListerWatcher) List(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: ctx
func (_m *ListerWatcher) Watch(ctx context.Context) (<-chan controller.Event, error) {
	ret := _m.Called(ctx)

	var r0 <-chan controller.Event
	if rf, ok := ret.Get(0).(func(context.Context) <-chan controller.Event); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan controller.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
